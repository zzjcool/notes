[{"content":"材料准备  主料  辣椒 猪肉   辅料  小米椒 玉米淀粉 油 糖 盐 生抽 老抽 鸡精 大蒜    准备工作  将猪肉切成丝，加入少量老抽和生抽，玉米淀粉腌制，使用淀粉腌制过的猪肉会更加的嫩，腌制十分钟左右就可以。 辣椒切开，掏出辣椒籽，放一旁备用，根据自己喜好可以加入适量来额小米椒。 大蒜切粒。  制作流程  热锅，加入食用油，等待油热。 将腌制的猪肉倒入锅中，大火翻炒，炒至变色后关火。 将肉倒出，放一旁备用。 剩下的油继续开火，放入大蒜。 等待有香味后加入辣椒翻炒。 炒一会后倒入之前的肉，加少量的糖。 加入适量的鸡精、盐、生抽以及少量老抽提色。 翻炒后出锅  成品总结  辣椒炒肉 \n第一次炒，肉放的太多了（主要还是盒马上买的一份辣椒份量实在是太少了），然后上海这里的辣椒都不是很辣，即使加入了小米椒，辣度还是有限。\n总体来说味道还是很不错的，从小最喜欢的一道菜。\n","date":"2022-02-15T12:06:06+08:00","image":"/p/%E8%BE%A3%E6%A4%92%E7%82%92%E8%82%89/ljcr_hu5ecfe790bedc4bd537f2edf54cfd5a05_316058_120x120_fill_q75_box_smart1.jpg","permalink":"/p/%E8%BE%A3%E6%A4%92%E7%82%92%E8%82%89/","title":"辣椒炒肉"},{"content":"Docker启动Nginx 可以使用docker-compose快速的启动Nginx docker-compose.yaml文件：\nversion:\u0026#39;3\u0026#39;services:nginx:image:nginxcontainer_name:nginxnetwork_mode:\u0026#34;host\u0026#34;volumes:- ./nginx:/etc/nginx/conf.drestart:unless-stopped可以在当前目录下的nginx目录添加任意配置\nNginx 反向代理Websocket server { listen 48265; server_name \u0026#34;\u0026#34;; location / { proxy_pass http://domain:48265; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Host $host; proxy_set_header Connection \u0026#34;Upgrade\u0026#34;; } } 最后一行配置可以转发ws\n有时候我们的nginx反向代理会出错，但是我们检查发现上游服务器是正常的，那这可能 是因为反向代理后端发生dns解析的变动（如k8s服务重启或者ddns），所以 需要配置nginx的dns解析（resolver 8.8.8.8），同时反向代理的后端地址需要写为变量：\nserver { listen 48265; server_name \u0026#34;\u0026#34;; resolver 119.29.29.29 8.8.8.8 valid=30s; set $proxy_pass_url http://domain:48265; location / { proxy_pass $proxy_pass_url; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Host $host; proxy_set_header Connection \u0026#34;Upgrade\u0026#34;; } } Nginx 直接显示系统目录 server { listen 8880; listen [::]:8880; server_name domain.com; location / { root /data; autoindex on; autoindex_exact_size off; autoindex_localtime on; charset utf-8,gbk; } } 其中root /data表示实际的目录位置\n","date":"2022-01-07T10:33:38+08:00","permalink":"/p/nginx-%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/","title":"Nginx 相关配置"},{"content":"net/url 添加query 原本有url:http://domain.com, 现在想要添加query参数变成:http://domain.com?key=value\n可以自己写一个方法去添加query参数。\nfunc TestURL(t *testing.T) { api, err := url.Parse(\u0026#34;http://domain.com\u0026#34;) if err != nil { t.Fatal(err) } URLAddQuery(api, \u0026#34;key\u0026#34;, \u0026#34;value\u0026#34;) fmt.Println(api.String()) } // URLAddQuery 提供一个URL，然后添加query参数 func URLAddQuery(addr *url.URL, key, value string) { query := addr.Query() query.Add(key, value) addr.RawQuery = query.Encode() } url拼接path api, err := url.Parse(\u0026#34;http://domain.com\u0026#34;) api.Path = \u0026#34;/api/test\u0026#34; ","date":"2022-01-04T19:43:41+08:00","permalink":"/p/golang-%E5%86%85%E7%BD%AE%E5%8C%85%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/","title":"Golang 内置包常用方法"}]